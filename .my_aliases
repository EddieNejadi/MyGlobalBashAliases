### Add this file to ~/.bashrc or ~/.bash_aliases  with:
#if [ -d ~/MyGlobalBashAliases ] && [ -f ~/MyGlobalBashAliases/.my_aliases ]; then
#        . ~/MyGlobalBashAliases/.my_aliases
#fi
if [ -d ~/MyGlobalBashAliases ] && [ -f ~/MyGlobalBashAliases/.my_aliases ]; then
       alias myalias="vim ~/MyGlobalBashAliases/.my_aliases && source ~/MyGlobalBashAliases/.my_aliases"   
else
       alias myalias="vim ~/.bash_aliases && source ~/.bash_aliases"
fi
#if [ -f ~/.bash_aliases ]; then
#       . ~/.bash_aliases
#fi
#       alias myalias="vim ~/MyGlobalBashAliases/.my_aliases && source ~/MyGlobalBashAliases/.my_aliases"   
# else
#        alias myalias="vim ~/.bash_aliases && source ~/.bash_aliases"
# fi
# if [ -f ~/.bash_aliases ]; then
#        . ~/.bash_aliases
# fi

# Print stderr to null 2> /dev/null or in script exec 2> /dev/null
# http://kvz.io/blog/2013/11/21/bash-best-practices/
# Sourcing bash alias to remote ssh host
# '"'"' is a single quotation with scaping
# ll | tee >(head -n 1 1>&2) | grep Feb
# ps aux | grep bash | grep -v root | grep -v grep | grep $USER | tr -s ' ' | cut -d ' ' -f 2| xargs -I proc /bin/bash -c "lsof -p proc && echo 'lineeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'"
# gzip < file > file.gz  gzip file without deleting it
# 
#
# nmap -sL 192.168.1.* | grep \(1.*
#
alias c="xclip -sel clip && echo -e '\e[1;33mAliases copied to xclip\e[0m'" # you might try 2>&1 before copy
alias ..="pushd .."
alias ...="pushd ../.."
alias ....="pushd ../../.."
alias .....="pushd ../../../../"
alias tmux="tmux -2"
alias tvim="tmux new-session 'vim'  \;"
alias ovim="vim -o"
alias oovim="vim -O"
alias vvim="vim -O"
alias pvim="vim -p"
alias dvim="vimdiff"
alias sshp="ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no"
alias mysource="source ~/.bash_aliases && source ~/.bashrc && source ~/MyGlobalBashAliases/.my_aliases"
alias myps="ps aux | grep -v grep | grep -i --color='auto'"
alias mypsu="ps aux | grep -v grep | grep -i $USER --color=always | grep -i --color='auto'"
alias mypsm="ps aux --sort -rss"
alias myaliasloc="vim ~/.bash_aliases && source ~/.bash_aliases"
alias findn="line && find . -iname"
alias mydu="du -sch .[!.]* * 2>&1 | grep -v 'du: cannot access .* No such file or directory' | sort -h"
alias mydut="du -sch .[!.]* * 2>&1 | grep -v 'du: cannot access .* No such file or directory' | sort -h | tail"
alias updatedb="sudo updatedb"
alias mygrep='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHn --color="auto" --exclude-dir=.hg'
alias mygrepc='grep -IHn --color="always"'
alias mygrepi='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHni --color="auto" --exclude-dir=.hg'
alias mygrep1='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHn --color="auto" -C 1'
alias mygrep3='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHn --color="auto" -B 3 -A 3'
alias mygrep5='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHn --color="auto" -B 5 -A 5'
alias mygrep10='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHn --color="auto" -B 10 -A 10'
alias mygrep20='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHn --color="auto" -B 20 -A 20'
alias mygrepr='echo -e "\e[1;33m=======================================================================\e[0m" && grep -IHnr --color="auto" --exclude-dir=.hg'
alias mygrepir='echo -e "\e[2;33m=======================================================================\e[0m" && grep -IHnri --color="auto" --exclude-dir=.hg'
alias grepc="grep --color=always"
alias gerp="grep"
alias cd..='pushd ..'
alias m='more'
alias rm='rm -i'
alias rmf='rm -f'
alias rmd='rm -rf'
alias rmpyc="find . -name '*.pyc' -type f -ls -delete;"
alias mv='mv -i'
alias myuntar="tar -zxvf"
alias mytar="tar -zcvf" # Example archive_name.tar.gz folder_to_compress
alias mdr="mkdir"
alias tolower="tr '[:upper:]' '[:lower:]'" # usage  echo TeSt | tolower 
alias toupper="tr '[:lower:]' '[:upper:]'" # usage  echo TeSt | toupper
alias less="less -Ri"
alias ls="ls -1"
alias ll='pwd && ls -htral --color=auto'
alias lsl='pwd && ls -hla --color=auto'
alias lsd='ls -lad */ .*/'
alias lld='ls -lad --color */ .*/'
alias pd="pushd"
alias po="popd"
alias dir="dirs -v -l"
alias cd="pushd"
alias "cd-"="pushd"
alias "cdh"="pushd ~"
alias myhl='sed s/ERROR/`printf "\033[31mERROR\033[0m"`/Ig | sed "s/warning\|warn"/`printf "\033[33mWARNING\033[0m"`/Ig'
alias mypsm="ps aux --sort -rss"
alias meminfo='echo "USER                RSS      PROCS" ; echo "------------------- -------- -----" ; ps hax -o rss,user | awk '"'"'{rss[$2]+=$1;procs[$2]+=1;}END{for(user in rss) printf "%-20s %8.0f %5.0f\n", user, rss[user]/1024, procs[user];}'"'"' | sort -rnk2'
alias myenv="env | grep -i --color"
alias aa="alias"
alias aph="ansible-playbook -i hosts"
alias ap="ansible-playbook"
alias anp="ansible-playbook"
alias apc="ansible-playbook --syntax-check"
alias aps="ANSIBLE_PIPELINING=TRUE ansible-playbook"
alias app="ansible -m ping"
alias anv="ansible-vault"
alias apv="ansible-vault"
alias anph="ansible-playbook -i hosts"
alias sshp="ssh -o PreferredAuthentications=password"
# alias fullname="getent passwd `whoami` | cut -d ':' -f 5"
alias fullname="echo -n 'Ldap: ' && ldapsearch -x -LLL uid=$USER | grep cn: | cut -d ' ' -f 2-  || echo ''; echo -n 'Local: ' && getent passwd $USER | cut -d ':' -f 5 || echo '' "
alias newrole="/etc/ansible/roles/gotansible.newrole/newrole"
# My own functions
rmtmp() { find . -name '*~' -ls -delete; } 
rm1() { find . -name '1' -type f \( -size 0 -or -size 141c \) -ls -delete; }
rm1a() { find . -name '1' -type f -ls -delete; }
srm() 
{
	shred -z -u $@
}
assh () {
  export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1)
  if ssh-add -l 2&>1 > /dev/null; then
    echo Found working SSH Agent:
    ssh-add -l
    # return
  else 
    eval `ssh-agent` && ssh-add
  fi
  # echo Cannot find ssh agent - maybe you should reconnect and forward it?
  find . -maxdepth 1 -name '1' -type f -size 0 -ls -delete; 
}
initssh() {
  export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1)
  if ssh-add -l 2&>1 > /dev/null; then
    echo Found working SSH Agent:
    ssh-add -l
  fi
  find . -maxdepth 1 -name '1' -type f -size 0 -ls -delete > /dev/null
}
uenv(){
	local v
	while read v; do
		if [[ $v == -* ]]; then
			unset ${v/#-/}
			# echo ${v/#-/}
		else
			v=${v/=/=\"}
			v=${v/%/\"}
			eval export $v
			# echo $v
		fi
	done < <(tmux show-environment | grep -v SSH)
	assh

}
cpuinfo () {
grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print "Total cpu usage:" usage "%"}'
(
own=$(id -nu)

for user in $(getent passwd | awk -F ":" '{print $1}' | sort -u)
do
	# print other user's CPU usage in parallel but skip own one because
	# spawning many processes will increase our CPU usage significantly
	if [ "$user" = "$own" ]; then continue; fi
	(top -b -n 1 -u "$user" | awk -v user=$user 'NR>7 { sum += $9; } END { if (sum > 0.0) print user, sum; }') & 
done
wait
# print own CPU usage after all spawned processes completed
top -b -n 1 -u "$own" | awk -v user=$own 'NR>7 { sum += $9; } END { print user, sum; }'
) 2>&1 | egrep -v "^\[" | sort -nrk 2
}
mysed () {
	if [[ -z "$1" || -z "$2" ||  -z "$3"  || "$1" == "-h" || "$1" == "--help" ]]; then
		echo "Enter start line number and end line number followed by Filename"
	else
		sed -n -e "$1,$2 p" -e "$2 q" "${@:3}"
	fi
}
function get_ff_info
{
	# sleep 2
	get_ff_info_folders=$(expr `/bin/ls -d1 */ .*/ 2>/dev/null | /usr/bin/wc -l` - 2)
	get_ff_info_all=$(expr `/bin/ls -a1 2>/dev/null | /usr/bin/wc -l` - 2)
	echo "${get_ff_info_folders:XXX}F-$(expr ${get_ff_info_all:0} - ${get_ff_info_folders:0})f"
	 
}
get_ff_info_timeout ()
{
	if [ -f /usr/bin/timeout ]; then
		/usr/bin/timeout 1 bash -c get_ff_info || echo "XXX:xxx"
	else
		echo "NotAvailable"
	fi
}
setps ()
{
	if [ -z $PS_ORG ]; then
		PS1=$PS_ORG
		export -f get_ff_info
		PS_ORG=$PS1
		PS1="\[\033[1;31m\]\u\[\033[1;33m\]@\[\033[1;34m\]\h\[\033[32m\] \w:\[\033[1;34m\]\[\033[1;36m\]\$(get_ff_info_timeout):\[\033[1;33m\]\$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')b\[\033[0m\] -> \[\033[0m\]"
	fi
}
setps
mygrepf()
{
    if [[ -z "$2" ]]; then
        grep -H "$1" * | cut -d ":" -f 1 | sort -u
    else
        grep -H "$1" $2 | cut -d ":" -f 1 | sort -u
    fi
}
fname()
{
	echo -n 'Ldap: ' && ldapsearch -x -LLL uid=$1 | grep cn: | cut -d ' ' -f 2-  || echo ''; echo -n 'Local: ' && getent passwd $1 | cut -d ':' -f 5 || echo ''
}
## Getting an alias in clipboard
ac() 
{ 
    echo "${BASH_ALIASES[$1]}" | xclip -sel clip && echo -e '\e[1;33mAliases copied to xclip\e[0m'
}
mknote()
{
    FILENAME="$1.md"
    if [ ! -f ${FILENAME} ]; then  
	touch ${FILENAME} && echo '% '$1 | tr -s "_" " " >> ${FILENAME} && echo '% '$(getent passwd `whoami` | cut -d ":" -f 5) >> ${FILENAME} && echo '% '$(date "+%B %d, %Y") >> ${FILENAME}
	cat ${FILENAME}
    else
	echo "Note file with name ${FILENAME} is already exists"
    fi
}
myfindtype()
{
    echo -e '\e[1;34m=======================================================================\e[0m'
        #echo $#
        #echo "find . -name ${args[0]} -exec grep ${args[1]} --color=auto {} \; -exec echo -e '\e[1;33m=======================================================================\e[0m' {} \;"
        FIND_QUERY="find . -name \"*$1\" -exec grep -s \"$2\" -Hn --color=auto {} \; -exec echo -e '\e[1;33m=======================================================================\e[0m' {} \;"
    echo $FIND_QUERY
        eval $FIND_QUERY
}
myfind()
{
        echo -e '\e[1;34m=======================================================================\e[0m'
        if [[ "$2" ]]; then 
		echo "hit couple"
		find . -iname "*$1*" -exec grep -s "$2" --color=auto {} \;
    	else if [[ "$1" ]]; then
        	echo "hit single"
		find . -iname "*$1*"
	else
		echo "Enter: \$1 filename_pattern and optional \$2 grep_pattern"
	fi
	fi
}
myfindmm()
{
        echo -e '\e[1;34m=======================================================================\e[0m'
        FIND_QUERY="find . -mmin -$1  -exec grep -s \"$2\" -Hn --color=auto {} \; -exec echo -e '\e[1;33m=======================================================================\e[0m' {} \;"
        echo $FIND_QUERY
        eval $FIND_QUERY
}
echo_black()
{
        echo -e "\e[1;30m$1\e[0m"
}
#alias eblack=echo_black
echo_red()
{
        echo -e "\e[1;31m$1\e[0m"
}
#alias ered=echo_red
echo_green()
{
        echo -e "\e[1;32m$1\e[0m"
}
#alias egreen=echo_green
echo_yellow()
{
        echo -e "\e[1;33m$1\e[0m"
}
#alias eyellow=echo_yellow
echo_blue()
{
        echo -e "\e[1;34m$1\e[0m"
}
#alias eblue=echo_blue
alias line='MYDATE=$(date) && echo -e "\e[1;33m$MYDATE\e[0m" && unset MYDATE && echo -e "\e[1;34m=======================================================================\e[0m" && echo -e "\e[1;32m=======================================================================\e[0m" && echo -e "\e[1;31m=======================================================================\e[0m"'
alias yelline='echo -e "\e[1;33m=======================================================================\e[0m"'


echo_colors ()
{
    for c in {0..255} ; do
            echo -e "\e[38;05;${c}m ${c} A colorful line =======================" 
    done
}
e() { emacs "$@" & }


# Kill all running containers.
alias dockerkillall='docker kill $(docker ps -q)'

# Delete all stopped containers.
alias dockercleanc='printf "\n>>> Deleting stopped containers\n\n" && docker rm $(docker ps -a -q)'

# Delete all untagged images.
alias dockercleani='printf "\n>>> Deleting untagged images\n\n" && docker rmi $(docker images -q -f dangling=true)'

# Delete all stopped containers and untagged images.
alias dockerclean='dockercleanc || true && dockercleani'

# Delete all stopped containers and untagged images.
alias dockerclean='dockercleanc || true && dockercleani'
